import React, { useEffect, useState } from 'react';
import { Loader, Card, FormField } from '../components/index';



const RenderCards = ({ data, title }) => {
  if (data && data.length > 0) {
    return data.map((post) => {
      return <Card key={post._id} {...post} />
    })
  }
  else {
    return <h2 className='mt-5 font-bold text-[#6449ff] text-xl uppercase' >{title}</h2>
  }
}

const Home = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [allPosts, setAllPosts] = useState(null);
  const [searchText, setSearchText] = useState('');
  const [searchResults , setSearchResults ] = useState(null);
  const [searchTimeOutState , setSearchTimeOutState ] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      setIsLoading(true);
      try {

        const response = await fetch('http://localhost:8080/api/v1/post');

        if (response.ok) {
          const result = await  response.json();
          setAllPosts(result.data.reverse());
          console.log("The retrieved data is  = "+result.data);
        }
        else {
          console.log("Could not get all posts");
          throw new Error('Could not get all posts !');
        }

      }
      catch (error) {

        alert(error.message?error.message : error);

      }
      finally {

        setIsLoading(false);

      }

    }
    fetchData();
  }, []);

  const handleSearch = (event)=>{
    setSearchText(event.target.value);
    clearTimeout(searchTimeOutState);
    const searchTimeOut = setTimeout(()=>{
      const results = allPosts.filter((singlePost)=>{
        return singlePost.name.toLowerCase().includes(searchText.toLowerCase() ) || singlePost.prompt.toLowerCase().includes(searchText.toLowerCase());
      });
      setSearchResults(results);
    },500);
    setSearchTimeOutState(searchTimeOut);
  }





return (
  <section className='max-w-7xl mx-auto'>
    <div>
      <h1 className='font-extrabold text-[#222328] text-[32px] ' >The Community Showcase</h1>

      <p className='mt-2 text-[#666e75] text-[#16px] max-w-[500px] '>Browse through a collection of imaginative and visually stunning images generated by IMAGINE-AI</p>

    </div>


    <div className='mt-16'>
      <FormField
      label='Search Posts'
      type='text'
      name='search'
      placeholder='a watercolor painting'
      value = {searchText}
      handleChange = {handleSearch}
      ></FormField>
    </div>

    <div className='mt-10'>
      {isLoading ? (
        <div className='flex justify-center item-center'>
          <Loader></Loader>
        </div>

      ) :
        (
          <>
            {searchText && (
              <h2 className='font-medium text-[#666e75] text-xl mb-3'>Showing results for <span className='text-[#222328]'>{searchText}</span></h2>
            )}

            <div className='grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3'>
              {searchText ?
                (<RenderCards data={searchResults}  title="No posts found"/>)
                :
                (
                  isLoading ? <Loader />  : <RenderCards data={allPosts} title="No posts found"  />
                )}

                {/* Had forgotten to add the loader
                So the component that was dynamically fed was rendered without its data , causing a fatal error */}

                {/* That's why loading state is absolutely essential  , hahaha , when loading  , loader should be rendered */}

              {/* Then  after that  , the error state should be checked and if isError , it should be rendered , finally , if data arrives , data should be rendered*/}


            </div>
          </>
        )}
    </div>



  </section>
)
}

export default Home